{"name":"Property-mapper","tagline":"A proof-of-concept for an annotation-based map-to-object property mapper.","body":"# Property mapper\r\n\r\n## History\r\n\r\nSometime at work, I was confronted with a broker used to map key-value `String` pairs from and to\r\nJava objects. This broker was a pain (for maintenance, and lacking scalibility) and we intended to\r\nwrite it from scratch for a long time.\r\n\r\nI add a global sketch of the new architecture (I *did* sketch it, on a flipboard sheet, side-by-side\r\nwith the previous one), and the main question that remained was how to easily perform the mapping,\r\nwithout sacrificing readability, maintenability and scalability.\r\n\r\nI proposed an annotation-based solution, and wrote a proof-of-concept, which was the base of this\r\nproject, and which explains the formats of some data, inspired by the particulars of the project I\r\nwas designing it for. This also was the occasion for me to work with annotations of my own. Learning\r\nthe basics is always useful and helps understand how a framework may work behind the scenes.\r\n\r\nThis solution was not retained (my superior preferred the mappings done explicitly in order to have a\r\nfiner control on it, but I kept this project nonetheless and tried to bring it up to correct coding\r\nstandards.\r\n\r\n## Warning\r\n\r\n> **This project was designed as a proof-of-concept and was never used in a production environment.\r\nThe test coverage suggests it works, and I would be happy to bring some support would you be to use\r\nit.**\r\n> \r\n> **When presenting this PoC to fellow developers, I was asked if {url-dozer}[Dozer] would be a better match\r\nfor my needs. I propose you check on it as it is a much more mature framework than mine, but would\r\nyou be to turn back to me, I would gladly take the opportunity of making it grow.**\r\n\r\n## Goal\r\n\r\nThis was designed to allow back and forth mapping between a `Map<String, String>` and a POJO.\r\n\r\nThe POJO's fields are to be annotated with the keys of the values to retrieve in or store to the\r\nmap, so the (un)mapping engine could perform its task autonomously, converting the fields from or to\r\nStrings.\r\n\r\n## Some vocabulary\r\n\r\n* **map**: convert a POJO to a `Map<String, String>`\r\n* **unmap**: convert a `Map<String, String>` to a POJO\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}